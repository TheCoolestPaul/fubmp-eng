const char FFAGT[] = "mod:Prototypes/Persons/__ Bieberfelde/FFA.e4p";
const char FFM[] = "mod:Prototypes/Persons/__ Bieberfelde/FFM.e4p";
const char FFMA[] = "mod:Prototypes/Persons/__ Bieberfelde/FFI.e4p";
const float AbbauenRange = 3500.0f;
class FOXAbbauenHelper: CommandScript
{
	bool possible(Person * Caller)
	{
		Person p(Caller);
		return(!p.IsInjured() 
		&& !p.IsDead() 
		&& !p.IsRescueDog() 
		&& p.GetState() == PERSONSTATE_NORMAL
		&& !p.IsCarryingPerson()
		&& !p.IsLinkedWithPerson()
		&& !p.IsPulling()
		&& !p.IsHidden()
		);
	}
	bool abbauen(Person *Caller, Vehicle * Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid()) return false;
		PersonList pl(Target->GetName());
		Person p(Caller);
		VehicleList vl(Caller->GetName());
		Vehicle v(Target);
		if (!v.HasCommand("ALARM_DUMMY")) return;
		bool actionFound = false;
		//vehicle actions
		// Pumpe aus
		if (!v.HasAnyAction() && v.HasCommand("TLF_Cool") && v.GetVehicleType()!=VT_FIREFIGHTERS_DLK)
		{
			//System::Log(" ~~ TLF DETECTED ~~ ");
			actionFound = true;
			v.PushActionWait(ACTION_NEWLIST, 0.5f);
			v.PushActionExecuteCommand(ACTION_APPEND, "Activate_Cannon", &v);
		}
		else if (v.HasCommand("DLKStop") && !v.HasAnyAction())
		{
			actionFound = true;
			v.PushActionExecuteCommand(ACTION_NEWLIST, "ZZDLK", &v, 77);
			v.PushActionExecuteCommand(ACTION_APPEND, "DLKLeiterAblegen", &v, 1);
			v.PushActionWait(ACTION_APPEND, 10.0f);
		}
		// Licht mast aus
		else if (v.HasCommand("TurnLM"))
		{
			actionFound = true;
			v.PushActionExecuteCommand(ACTION_APPEND, "TurnLM", &v);
		}
		// DLK ablegen
		// TS nach Hause bringen
		PersonList TSP("TSP");
		for (int k = 0; k < TSP.GetNumPersons(); k++)
		{
			if (TSP.GetPerson(k)->GetUserData() == v.GetID())
			{
				actionFound = true;
				if(!TSP.GetPerson(k)->HasAnyAction() && TSP.GetPerson(k)->HasCommand("FOXBaueAb"))
				{
					TSP.GetPerson(k)->PushActionExecuteCommand(ACTION_APPEND, "FOXTSReturn", &v);
				}
				else if (!TSP.GetPerson(k)->HasAnyAction())
				{
					TSP.GetPerson(k)->AssignCommand("FOXBaueAb");
				}
			}
		}
		// First sort out persons
		for (int k = 0; k < pl.GetNumPersons(); k++)
		{
			//System::Log("IsIdle , %i", pl.GetPerson(k)->IsIdle()?1:0);
			//System::Log("IsNotMoving , %i", !pl.GetPerson(k)->IsMoving()?1:0);
			//System::Log("IsCommandable , %i", p.IsCommandable()?1:0);
			//System::Log("IsRightState , %i", (p.GetState() == PERSONSTATE_NORMAL)?1:0);
			// Check if person is ready to recieve command
			if (Caller->GetID() != pl.GetPerson(k)->GetID() 
				&& FOXAbbauenHelper::possible(pl.GetPerson(k)) 
				&& ((pl.GetPerson(k)->IsIdle() && !pl.GetPerson(k)->IsMoving() && !pl.GetPerson(k)->HasAnyAction()) || pl.GetPerson(k)->IsCurrentAction("EActionExtinguish") || pl.GetPerson(k)->IsCurrentAction("EActionCool") || pl.GetPerson(k)->IsCurrentAnimation("useextinguis")/*childID == 0*/)
				
				/*&& (pl.GetPerson(k)->IsIdle()||childID == 0)
				&& (!pl.GetPerson(k)->IsMoving()||childID == 0)
				&& (p.IsCommandable() || (childID != 0 && Game::IsMultiplayer()))*/ // In Multiplayer, Commandable on iterative called function is weird
				)
			{
				//if(Caller->GetName()== "10_10_01") System::Log("abbauenlarge3");
				//if (Target->GetName() == "10_33_01") System::Log("DLKabbauen3");
				//System::Log("~~~CheckeAbbauen~~~");
				Person FWM(pl.GetPerson(k));
				FWM.SetCommandable(true);
				bool block = false;
				//System::Log("PersonCommandAbbauen");
				if (childID == 0)
				{
					// Maschinist und löschen abräumen
					if (FWM.IsCurrentAnimation("useextinguis"))
					{
						FWM.PushActionMove(ACTION_NEWLIST, v.GetPosition());
					}
					FWM.AssignCommand("FOXBaueAb");				
					actionFound = true;
					block = true;
				}
				//FWM.PushActionWait(ACTION_APPEND, 0.2f);
				if (FWM.IsFlagSet(OF_HIDDEN) || FWM.HasCommand("Verteiler_block"))
				{
					// Debug for Verteiler
					actionFound = true;
					block = true;
					FWM.AssignCommand("FOXBaueAb");
				}
				else if (FWM.HasCommand("FOXBaueAb"))
				{
					//System::Log("actionFound %i", 5);
					actionFound = true;
					block = true;
					FWM.RemoveCommand("FOXBaueAb");
				}
				// DLK verlassen
				else if (FWM.IsInDLKBasket())
				{
					//System::Log("InBasket");
					actionFound = true;
					FWM.AssignCommand("FOXBaueAb");
					Actor dlk = Game::GetActor(FWM.GetEnteredCarID());
					if (dlk.IsValid())
					{
						//System::Log("Valid1");
						Vehicle vecDLK(&dlk);
						if (vecDLK.IsValid())
						{
							//System::Log("Valid2");
							if (vecDLK.IsInstalled() && !vecDLK.IsBasketEmpty())
							{
								//System::Log("installed");
								//System::Log("deinstalling DLK");
								vecDLK.PushActionBasketDown(ACTION_APPEND, Vector(0.f, 0.f, 0.f));
								vecDLK.PushActionDeinstall(ACTION_APPEND);
								vecDLK.PushActionWait(ACTION_APPEND, 3.0f);
								vecDLK.PlayAnimCloseDoor(DAT_SPECIAL, 3.0f, Caller);
							}
						}
					}
					actionFound = true;
					FWM.AssignCommand("FOXBaueAb");
				}
				else if (FWM.HasCommand("DLKDummyBasket"))
				{
					actionFound = true;
					FWM.AssignCommand("FOXBaueAb");
					System::Log(" ~~ DLK ~~ ");
					GameObjectList korb = p.GetObjectsInRange(300.0f, ACTOR_OBJECT);
					for (int m = 0; m < korb.GetNumObjects(); m++)
					{
						GameObject tarBasket(korb.GetObject(m));
						System::Log(" ~~ DLK CHECKING %s %s %i ~~ ", tarBasket.GetName(), tarBasket.GetPrototypeName(), (tarBasket.HasCommand("DLKDummyBasket")?1:0));
						if (tarBasket.HasCommand("DLKDummyBasket") && tarBasket.GetID() != FWM.GetID())
						{
							System::Log(" ~~ DLK EXECUTING %s ~~ ", korb.GetObject(m)->GetName());
							FWM.PushActionExecuteCommand(ACTION_INSERT, "ZZDLK", korb.GetObject(m), 79);
						} 
					}
				}
				// Haus verlassen - funktioniert nicht, oh.GetEntrancePosition(true) liefert Null Vektor, keine Ahnung warum.
				else if (FWM.GetEnteredHouseID() != -1)
				{
					OpenHouse oh(& Game::GetActor(FWM.GetEnteredHouseID()));
					if (oh.IsValid()){
						if (oh.HasGroundEntrance())
						{
							//System::Log(" ~~ OpenHouseLeave ~~ ");
							FWM.PushActionMove(ACTION_APPEND, oh.GetEntrancePosition(false));
							FWM.PushActionLeaveHouse(ACTION_APPEND, &oh);
						}
						else
						{
							//System::Log(" ~~ OpenHouseLeave A ~~ ");
							GameObjectList gl = oh.GetObjectsInRange(5000.0f, ACTOR_OBJECT);
							for (int m = 0; m < gl.GetNumObjects(); m++)
							{
								//System::Log(" ~~ OpenHouseLeave B ~~ ");
								GameObject obj(gl.GetObject(m));
								System::Log(" ~~ ObjectFound %s ~~ ",  obj.GetPrototypeName());
								if (StrCompare(obj.GetPrototypeName(), "OH_Stairs") == 0)
								{
									//System::Log(" ~~ OpenHouseLeave C ~~ ");
									GameObject ohg = obj.GetClosestObjectInRange(5000.0f, ACTOR_OPEN_HOUSE);
									if (oh.GetID() == ohg.GetID())
									{
										//System::Log(" ~~ OpenHouseLeave D ~~ ");
										FWM.PushActionExecuteCommand(ACTION_APPEND, "EnterHouse", &obj);
										break;
									}
								}
							}
						}
						actionFound = true;
						FWM.AssignCommand("FOXBaueAb");
					}
				}
				
				else if (FWM.GetEnteredCarID() != -1 || FWM.IsInjured() || FWM.IsDead())
				{
					// ignore people in vehicles, injured or dead
					FWM.AssignCommand("FOXBaueAb");
				}
				// Schlauch abkuppeln
				else if (FWM.GetEquipment()==EQUIP_FIREHOSE && FWM.GetType() == ACTOR_PERSON && FWM.GetFirehoseID() != 0)
				{
					FWM.PushActionExecuteCommand(ACTION_APPEND, "RemoveFirehose", &FWM);
					//System::Log("actionFound %i", 5);
					actionFound = true;
					FWM.AssignCommand("FOXBaueAb");
				}
				// Zum Fahrzeug laufen

				// Equipment ablegen
				else if ((FWM.GetEquipment()!=EQUIP_NONE || FWM.HasCommand("DummyHasBesen") || FWM.HasCommand("leck_abdichten_zufall") || FWM.HasCommand("FOXEquipBlock")))
				{
					if (FWM.Distance(v) > 300.0f)
					{
						//System::Log("actionFound %i", 6);
						actionFound = true;
						FWM.PushActionMove(ACTION_APPEND, v.GetPosition());
						FWM.PushActionTurnTo(ACTION_APPEND, v.GetPosition());
						FWM.AssignCommand("FOXBaueAb");
					}
					else if (FWM.GetEquipment() == EQUIP_SHEARS || FWM.HasCommand("FOXHabeSchere"))
					{
						if (FWM.GetUserData() != 0)
						{
							Actor Rustwagen = Game::GetActor(FWM.GetUserData());
							if (Rustwagen.IsValid()) FWM.PushActionExecuteCommand(ACTION_APPEND, "RemShears", &Rustwagen); 
							actionFound = true;
							FWM.AssignCommand("FOXBaueAb");
						}
					}
					else
					{
						actionFound = true;
						//System::Log("actionFound %i", 7);
						FWM.PushActionExecuteCommand(ACTION_APPEND, "RemoveEquipment", &FWM); 
						FWM.AssignCommand("FOXBaueAb");
					}
				}
				// Pylonen ablegen
				else if (FWM.HasCommand("AbortSetPylon"))
				{
					actionFound = true;
					FWM.PushActionExecuteCommand(ACTION_APPEND, "AbortSetPylon", &FWM); 
					FWM.AssignCommand("FOXBaueAb");
				}
				// Umziehen
				else if (FWM.HasCommand("ChangeHupf") && !FWM.HasCommand("FOXCantChange"))
				{
					pl.GetPerson(k)->PushActionExecuteCommand(ACTION_APPEND, "ChangeHupf", &v,0,false);
					//System::Log("actionFound %i", 8);
					actionFound = true;
					FWM.AssignCommand("FOXBaueAb");
				}

				// Schläuche Abkuppeln und Standrohr abbauen
				else if (FWM.HasCommand("GetFirehose") || FWM.HasCommand("FOXGetBrt"))
				{
					//System::Log("SearchingForKupplung");
					for (int j = 0; j < pl.GetNumPersons(); j++)
					{
						Person pn = pl.GetPerson(j);
						if ((pn.IsFlagSet(OF_HIDDEN)&&pn.GetFirehoseID() != 0) || pn.HasCommand("Verteiler_block"))
						{
							//System::Log("Kupplunggefunden");
							Actor Fzg = Game::GetActor(pn.GetUserData());
							if (Fzg.GetType()==ACTOR_VEHICLE)
							{
								//System::Log("Fahrzeuggefunden");
								Vehicle vv(&Fzg);	
								if (pn.HasCommand("Verteiler_block")) FWM.PushActionExecuteCommand(ACTION_APPEND, "PickUp", &vv);
								else FWM.PushActionExecuteCommand(ACTION_APPEND, "RemoveFirehose", &vv);
								
								// Do this to try and prevent bugs, by executing command when person is beeing replaced
								pn.AssignCommand("FOXBaueAb");
								//
								
								//System::Log("actionFound %i", 9);
								actionFound = true;
								FWM.AssignCommand("FOXBaueAb");
							}
						}
					}
					
					// Standrohr abbauen
					if(FWM.HasCommand("FOXGetStandrohr") && !FWM.HasCommand("FOXBaueAb"))
					{
						//System::Log("GF-A");
						GameObjectList GL("standrohr");
						for (int m = 0; m < GL.GetNumObjects(); m++)
						{
							Actor a = Game::GetActor(GL.GetObject(m)->GetUserData());
							GameObject obj(&a);
							if(obj.IsValid())
							{
								//System::Log("GF-B");
								Actor aa = Game::GetActor(obj.GetUserData());
								Vehicle targetv(&aa);
								if (targetv.IsValid())
								{
									//System::Log("GF-C");
									if (targetv.HasName(FWM.GetName()))
									{
										//System::Log("GF-D");
										FWM.PushActionExecuteCommand(ACTION_APPEND, "FOXGetStandrohr", GL.GetObject(m));
										actionFound = true;
										FWM.AssignCommand("FOXBaueAb");
										break;
									}
								}
							}
						}
					}	
					if (FWM.HasCommand("FOXGetTauch") && !FWM.HasCommand("FOXBaueAb")) // Tauchpumpe einsammeln
					{
						VehicleList vl("TP");
						for (int m = 0; m < vl.GetNumVehicles(); m++)
						{
							Vehicle ts(vl.GetVehicle(m));
							if (ts.GetUserData() == v.GetID())
							{
								actionFound = true;
								FWM.AssignCommand("FOXBaueAb");
								FWM.PushActionExecuteCommand(ACTION_APPEND, "FOXGetTauch", &ts);
							}
						}
					}
					if (FWM.HasCommand("FOXTSGet") && !FWM.HasCommand("FOXBaueAb")) // TS einsammeln
					{
						VehicleList vl("TS");
						for (int m = 0; m < vl.GetNumVehicles(); m++)
						{
							Vehicle ts(vl.GetVehicle(m));
							if (ts.GetUserData() == v.GetID())
							{
								if (ts.HasCommand("FOXTSClose"))
								{
									ts.PushActionExecuteCommand(ACTION_APPEND, "FOXTSClose", &ts);
									FWM.PushActionWait(ACTION_APPEND, 8.0f);
								}
								actionFound = true;
								FWM.AssignCommand("FOXBaueAb");
								FWM.PushActionExecuteCommand(ACTION_APPEND, "FOXTSGet", &ts);
								break;
							}
						}
					}
					if (FWM.HasCommand("FOXGetZumischer") && !FWM.HasCommand("FOXBaueAb")) // TS einsammeln
					{
						VehicleList vl("ZU");
						for (int m = 0; m < vl.GetNumVehicles(); m++)
						{
							Vehicle ts(vl.GetVehicle(m));
							if (ts.GetUserData() == v.GetID())
							{
								actionFound = true;
								FWM.AssignCommand("FOXBaueAb");
								FWM.PushActionExecuteCommand(ACTION_APPEND, "pickup", &ts);
								break;
							}
						}
					}
					if (FWM.HasCommand("RemovePylone") && !FWM.HasCommand("FOXBaueAb"))	// Pylonen einsammeln 
					{
						char name[255];
						snprintf(name, 255, "%s_pylon", FWM.GetName());
						VehicleList vl(name);
						for (int m = 0; m < vl.GetNumVehicles(); m++)
						{
							FWM.PushActionExecuteCommand(ACTION_APPEND, "RemovePylone", vl.GetVehicle(m));
							FWM.AssignCommand("FOXBaueAb");
							actionFound = true;
							break;
						}					
					}
				}
				// Generator ausschalten
				else if (FWM.HasCommand("FOXGeneratorStarten") && !FWM.HasCommand("FOXBaueAb"))
				{
					if (v.HasCommand("GENERATOR_ON"))
					{
						FWM.PushActionExecuteCommand(ACTION_APPEND, "FOXGeneratorStarten", &v, -99);
						FWM.AssignCommand("FOXBaueAb");
						actionFound = true;
					}
				}
				if (FWM.HasCommand("DLKStuetzenEinAus") && !FWM.HasCommand("FOXBaueAb"))
				{
					if (v.HasCommand("DLKAbbauen"))
					{
						FWM.PushActionExecuteCommand(ACTION_NEWLIST, "DLKStuetzenEinAus", &v);
						FWM.AssignCommand("FOXBaueAb");
						actionFound = true;
					}
				}
				if (FWM.Distance(v) > 300.0f && !block && !FWM.HasCommand("FOXBaueAb"))
				{
					//System::Log(" ~~ abbauen Fehler ~~ ");
					actionFound = true;
					FWM.PushActionMove(ACTION_APPEND, v.GetPosition());
					FWM.PushActionTurnTo(ACTION_APPEND, v.GetPosition());
					FWM.AssignCommand("FOXBaueAb");
				}
				/*
				if (!actionFound)
				{
					FWM.PushActionExecuteCommand(ACTION_APPEND, "entercar", &v);
					FWM.AssignCommand("FOXBaueAb");
					//actionFound = true;
				}*/
			}// Check if person is already doing anything
			else if (Caller->GetID() != pl.GetPerson(k)->GetID() 
				&& FOXAbbauenHelper::possible(pl.GetPerson(k)))
			{
				//System::Log("actionFound %i", 10);
				actionFound = true;
			}
		}
		return actionFound;
	}
};
object FOXBaueAb : CommandScript
{
	FOXBaueAb(){ SetGroupID(20);}
	bool CheckPossible(GameObject *Caller){return true;}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	void PushActions(GameObject *Caller, Actor *Target, int childID){}
};
object FOXCantChange : CommandScript
{
	FOXCantChange(){ SetGroupID(20);}
	bool CheckPossible(GameObject *Caller){return true;}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	void PushActions(GameObject *Caller, Actor *Target, int childID){}
};
object FOXGFAbbauen : CommandScript
{
	FOXGFAbbauen(){SetRestrictions(RESTRICT_SELFEXECUTE);}
	bool CheckPossible(GameObject *Caller){return true;}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return (Caller->GetID()==Target->GetID());}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{ 
		
		Person P(Caller);
		if (P.IsInjured() || P.IsDead()) return;
		bool actionFound = false;
		Caller->PushActionWait(ACTION_NEWLIST, 0.2f);
		Caller->PushActionSwitchAnim(ACTION_APPEND, "wavehelp");
		Caller->PushActionWait(ACTION_APPEND, 0.8f);
		// Einsatzleiter alle abbauen
		if (P.HasCommand("einsatzleiter_bma_reset"))
		{
			//System::Log("%s Einsatzleiter", Caller->GetName());
			GameObjectList OPT = Caller->GetObjectsInRange(AbbauenRange, ACTOR_VEHICLE);
			for (int k = 0; k < OPT.GetNumObjects(); k++)
			{
				if (OPT.GetObject(k)->HasCommand("ALARM_DUMMY"))
				{
					//System::Log("Checking %s", OPT.GetObject(k)->GetName());
					if (OPT.GetObject(k)->HasNamePrefix("10_")
						||OPT.GetObject(k)->HasNamePrefix("01_")
						||OPT.GetObject(k)->HasNamePrefix("02_")
						||OPT.GetObject(k)->HasNamePrefix("03_")
						||OPT.GetObject(k)->HasNamePrefix("04_")
						||OPT.GetObject(k)->HasNamePrefix("05_")
						||OPT.GetObject(k)->HasNamePrefix("06_")
						||OPT.GetObject(k)->HasNamePrefix("30_"))
					{
						PersonList GFO(OPT.GetObject(k)->GetName());
						bool GFFound = false;
						if (GFO.GetNumPersons() > 0) 
						{
							for (int j = 0; j < GFO.GetNumPersons(); j++)
							{
								if (!GFFound && GFO.GetPerson(j)->HasCommand("FOXGFAbbauen")&& !GFO.GetPerson(j)->IsInjured() && !GFO.GetPerson(j)->IsDead() && !GFO.GetPerson(j)->HasCommand("einsatzleiter_bma_reset"))
								{
									GFFound = true;
									if (childID == 0 && Caller->GetID() != GFO.GetPerson(j)->GetID()) 
									{
										//System::Log("GF %s", OPT.GetObject(k)->GetName());
										GFO.GetPerson(j)->PushActionWait(ACTION_NEWLIST, 0.7f);
										if (GFO.GetPerson(j)->GetEnteredCarID() != -1)
										{	
											Actor tar = Game::GetActor(GFO.GetPerson(j)->GetEnteredCarID());
											GFO.GetPerson(j)->PushActionLeaveCar(ACTION_APPEND, &tar);
										}
										GFO.GetPerson(j)->PushActionExecuteCommand(ACTION_APPEND, "FOXGFAbbauen", NULL, 0, false);
										actionFound = true;
									}
								}
							}
							if (!GFFound)
							{
								//System::Log("Non GF %s", OPT.GetObject(k)->GetName());
								Vehicle VT(OPT.GetObject(k));
								//System::Log(VT->GetName());
								bool act = FOXAbbauenHelper::abbauen(&P, &VT, childID);
								if (act) actionFound = true;
							}
						}
					}
				}
			}
		}
		// Nur GF abbauen
		else
		{
			VehicleList vl(Caller->GetName());
			if (vl.GetNumVehicles()>0)
			{
				//System::Log("GF Abbauen");
				actionFound = FOXAbbauenHelper::abbauen(&P, vl.GetVehicle(0), childID);
			}
		}
		if (!actionFound)
		{
			System::Log(" ~~ %s Abbauen abgeschlossen ~~ ", Caller->GetName());
			VehicleList vl(Caller->GetName());
			if (vl.GetNumVehicles()>0)
			{
				Caller->PushActionMove(ACTION_APPEND, vl.GetVehicle(0)->GetPosition());
				vl.GetVehicle(0)->PushActionExecuteCommand(ACTION_APPEND, "VCmdEinsteigen", vl.GetVehicle(0)); // Aufsitzen
			}
		}
		else Caller->PushActionExecuteCommand(ACTION_APPEND, "FOXGFAbbauen", Caller, 1, false);
	}	
};

object FOXGFSchnellangriff : CommandScript
{
	FOXGFSchnellangriff(){ 
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("Schnellangriff");
	}
	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid()) return false;
		return true;
	}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return Caller->GetID() == Target->GetID();
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		//System::Log("Schnellangriff");
		VehicleList vl (Caller->GetName());
		if (vl.GetNumVehicles()>0)
		{
			//System::Log("Schnellangriff 1");
			Vehicle v(vl.GetVehicle(0));
			if (v.GetVehicleType() != VT_FIREFIGHTERS_GTF) return;
			PersonList pl(v.GetName());
			if (pl.GetNumPersons()<1) return;
			int ATF = -1;
			int ATM = -1;
			int MA = -1;
			for (int k = 0; k < pl.GetNumPersons(); k++)
			{
				Person t(pl.GetPerson(k));
				if (t.IsDead() || t.IsInjured() || t.HasAnyAction() || (t.GetEnteredCarID() != -1 && t.GetEnteredCarID() != v.GetID()) || t.GetEquipment() != EQUIP_NONE || t.HasCommand("FOXEquipBlock") || !t.IsIdle() /*|| t.IsCurrentAction("useextinguis")*/)
					continue;
				//System::Log("protoype %s %s %s",pl.GetPerson(k)->GetPrototypeName(), FFAGT, FFMA);
				if (StrCompare(pl.GetPerson(k)->GetPrototypeFileName(), FFAGT) == 0)
				{
					if (ATF == -1) ATF = k;
					else if (ATM == -1) ATM = k;
				}
				if (StrCompare(pl.GetPerson(k)->GetPrototypeFileName(), FFMA) == 0)
				{
					if (MA == -1) MA = k;
				}
			}
			if (ATF == -1 || ATM == -1)
			{
				for (int k = 0; k < pl.GetNumPersons(); k++)
				{
					Person t(pl.GetPerson(k));
					if (t.IsDead() || t.IsInjured() || t.HasAnyAction() || (t.GetEnteredCarID() != -1 && t.GetEnteredCarID() != v.GetID()) || t.GetEquipment() != EQUIP_NONE || t.HasCommand("FOXEquipBlock") || !t.IsIdle() /*|| t.IsCurrentAction("useextinguis")*/)
						continue;
					//System::Log("protoype %s %s %s",pl.GetPerson(k)->GetPrototypeName(), FFAGT, FFMA);
					//System::Log("protoype %s %s %s",pl.GetPerson(k)->GetPrototypeName(), FFAGT, FFMA);
					if (StrCompare(pl.GetPerson(k)->GetPrototypeFileName(), FFM) == 0)
					{
						if (ATF == -1) ATF = k;
						else if (ATM == -1) ATM = k;
					}
				}
			}
			//System::Log("Schnellangriff 2 %i %i %i", ATF, ATM, MA);
			if (ATF == -1) return;
			//System::Log("Schnellangriff 3");
			// Schnellangriff abfahrt
			//Caller->SetAnimation("wavehelp");
			//Caller->SetAnimationTime(4.0f);
			if((v.HasName("01_46_01")) || (v.HasName("10_40_01")) || (v.HasName("10_46_01")) || (v.HasName("02_46_02")) || (v.HasName("03_43_01")) || (v.HasName("04_43_01")) )
			{
				v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 6);	
			}			
			if(v.HasName("01_42_01")|| (v.HasName("05_42_01")))
			{
				v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 4);	
			}
			if(v.HasName("02_44_01"))
			{
				v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 4);	
			}
			if(v.HasName("AB_WASSER"))
			{
				v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 1);	
			}
			if(v.HasName("30_25_01"))
			{
				v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 3);	
			}
			v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 9);	
			//System::Log("Schnellangriff 4");
			v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 19);
			v.PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", &v, 20);	
			Audio::StopSample(v.GetUserData());
			v.PushActionExecuteCommand(ACTION_APPEND, "SOUND_PLAYER", Caller, 5, true);
			Person p (pl.GetPerson(ATF));
			if(p.HasCommand("RemoveFirehose"))
	        {
	            TargetPoint targetPoint = TARGET_EQUIPMENTDOOR;
	            if (p.GetEnteredCarID() != -1) p.PushActionLeaveCar(ACTION_NEWLIST, &v);
	            p.PushActionMove(ACTION_APPEND, v.GetChildPosition("POS_SA"));
	            p.PushActionTurnTo(ACTION_APPEND, &v);
	            p.PushActionGetEquipment(ACTION_APPEND, &v, EQUIP_FIREHOSE);
	          	p.PushActionMove(ACTION_APPEND, &v, TARGET_FREE_CONNECTOR);
				p.PushActionExecuteCommand(ACTION_APPEND, "DummyAttachFirehose", &v, 6, false);
			}
			if (ATM != -1)
			{
				Person p2 (pl.GetPerson(ATM));
				if (p2.GetEnteredCarID() != -1) p2.PushActionLeaveCar(ACTION_NEWLIST, &v);
				p2.PushActionExecuteCommand(ACTION_APPEND, "GetAxe", &p2);
			}
			if(v.HasChild("wasservers") && (MA != -1))
			{
				Person p3 (pl.GetPerson(MA));
				if (p3.GetEnteredCarID() != -1) p3.PushActionLeaveCar(ACTION_NEWLIST, &v);
	            p3.PushActionExecuteCommand(ACTION_APPEND,"PcmdPumpSwitch",&v,0);
			}
		}

	}
};

