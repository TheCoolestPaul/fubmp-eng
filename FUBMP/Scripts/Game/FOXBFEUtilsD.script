Vector eingang; Vector wache; Vector wendep; Vector richtung; Vector parkpos;
char AlarmString[7]; char FireResistance[3];
int ZUFALL;
Person p; Actor eing; Actor fz;
int DummyGroup_b = "23";
int bswindex = 1000;

int DummyGroup_af   = 	"29";

const float wlfFac = 1.0f;
const float wlfDFac = 0.97f;

object VcmdInstallTent : CommandScript
{
	VcmdInstallTent()
	{
		SetIcon("install");
		SetCursor("install");
		SetValidTargets(ACTOR_VEHICLE);
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_VEHICLE || !Caller->HasCommand("ALARM_DUMMY")) return false;
		return true;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID()) return false; 
		if (Caller->GetType() == ACTOR_VEHICLE) return true;
		return true;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		float r[9]; float rot[9];
		Vector CarPos = Caller->GetPosition();
		Caller->PushActionWait(ACTION_NEWLIST, 0.1f);
		Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
		if (Caller->HasName("03_91_01")) {
			if (!Caller->IsSpecialLightEnabled()) Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdUmfeld", Caller, 0, false);
			if (Caller->HasCommand("DummyHasSiren")) Caller->PushActionExecuteCommand(ACTION_APPEND, "VcmdSiren", Caller, 0, false);
		Caller->PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", Caller, 9);
		}
		if (Caller->HasName("18_28_01")|| Caller->HasName("15_38_01"))
		{
			Caller->PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", Caller, 1);
			Caller->PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", Caller, 2);
			Caller->PushActionExecuteCommand(ACTION_INSERT, "FOXGSteuerung", Caller, 9);
		} 
		Caller->EnableCommand("VCmdParking", false);
		Caller->EnableCommand("MoveTo", false);
		if (Game::FindFreePosition(Caller, CarPos)) {
			Vehicle v;
			if (Caller->HasName("AB_MANV")) v = Game::CreateVehicle("mod:Prototypes/Vehicles/__RD_FEUERWEHR/SEG_ZELT_01_1.e4p", Caller->GetName());
			if (Caller->HasName("18_28_01") || Caller->HasName("15_38_01")) v = Game::CreateVehicle("mod:Prototypes/Vehicles/__RD_FEUERWEHR/SEG_ZELT_01_1.e4p", Caller->GetName());
			if (Caller->HasName("03_91_01")) v = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/ABC_Dekon.e4p", Caller->GetName());
			if (Caller->HasName("AB_DEKON")) v = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/ABC_Dekon.e4p", Caller->GetName());
			if (Caller->IsValid()) {
				if (Caller->HasName("AB_MANV")){ float dx = -400.f, dy = 0.f, dz = 0.f,winkel=180;
				}else if (Caller->HasName("18_28_01")|| Caller->HasName("15_38_01")){ float dx = -500.f, dy = 0.f, dz = 0.f,winkel=180;
				}else{ float dx = -600.f, dy = 0.f, dz = 0.f,winkel=0;}
				Math::RotateVector(dx, dy, dz, r);
				Math::EulerToMatrix(0.f, 0.f, 0.f, rot);
				Math::MultiplyMatrices(rot, r);
				CarPos = CarPos + Vector(dx, dy, 0);
				float dreh2[9];
				Math::EulerToMatrix(winkel, 0, 0, dreh2);
				Math::MultiplyMatrices(dreh2, rot);
				v.SetRotation(dreh2[0], dreh2[1], dreh2[2], dreh2[3], dreh2[4], dreh2[5], dreh2[6], dreh2[7], dreh2[8]);
				v.SetPosition(CarPos);
				v.UpdatePlacement();
			} if (Caller->HasName("AB_MANV") || Caller->HasName("18_28_01") || Caller->HasName("15_38_01")) {
				v.SetMaxPassengers(4);
				v.SetMaxTransports(12);
				v.AssignCommand("EmptyCar");
			} if (Caller->HasName("AB_DEKON")) {
				v.SetMaxPassengers(9);
				v.SetMaxTransports(8);
				v.AssignCommand("EmptyCar");
			} if (Caller->HasName("03_91_01")) {
				v.SetMaxPassengers(9);
				v.SetMaxTransports(8);
				v.AssignCommand("EmptyCar");
			}
			if (!Caller->HasCommand("DummyTentInstalled")) Caller->AssignCommand("DummyTentInstalled");
			if (Caller->HasCommand("VcmdInstallTent")) Caller->RemoveCommand("VcmdInstallTent");
			if (!Caller->HasCommand("VcmdDeinstallTent")) Caller->AssignCommand("VcmdDeinstallTent");
			if (Game::IsMultiplayer()) v.SetPlayerMP(Caller->GetPlayerMP());
			Audio::PlaySample3D("mod:Audio/FX/Misc/Tools01.wav", Caller->GetPosition());
		} else {
			char Namestring[255]; char Hint[255];
			Game::GetGameString(Caller->GetPrototypeName(), Namestring, 255);
			snprintf(Hint, 255, "%s: Not enough space available!", Namestring);
			if (Game::IsMultiplayer()) ScriptInterface::ShowMessageTickerTextForAll(Hint);
			else Mission::PlayHint(Hint);
			Caller->AssignCommand("VcmdInstallTent");
		}
	}	
};

object VcmdDeinstallTent : CommandScript
{
	VcmdDeinstallTent()
	{
		SetIcon("deinstall");
		SetCursor("deinstall");
		SetValidTargets(ACTOR_VEHICLE | ACTOR_OBJECT);
		SetPossibleCallers(ACTOR_VEHICLE);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid()) return false; 
		if (Caller->GetType() == ACTOR_VEHICLE) return true; 
		return false;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Target);
		if (StrCompare(v.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/ABC_Dekon.e4p")
		 && StrCompare(v.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__RD_FEUERWEHR/SEG_ZELT_01_1.e4p")) return false;
		if(v.GetNumPassengers() != 0 || v.GetNumTransported() != 0) return false;	
		return true;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		Vehicle m(Target);
		PersonList pl = m.GetTransports();
		if(pl.GetNumPersons() == 0)
		{
			Audio::PlaySample3D("mod:Audio/FX/Misc/Tools01.wav", Caller->GetPosition());
			m.PushActionDeleteOwner(ACTION_NEWLIST);			
			if (v.HasCommand("DummyTentInstalled")) Caller->RemoveCommand("DummyTentInstalled");
			if (!v.HasCommand("VcmdInstallTent")) Caller->AssignCommand("VcmdInstallTent");
			if (v.HasCommand("VcmdDeinstallTent")) Caller->RemoveCommand("VcmdDeinstallTent");
			if (v.HasName("03_91_01")) {
				if (v.HasCommand("DUMMY_GR")) {
					v.PlayAnimCloseDoor("G_R", 1.0f, 0);
					v.RemoveCommand("DUMMY_GR");	
				}
			}
			if (v.HasName("18_28_01") || v.HasName("15_38_01")) {
				if (v.HasCommand("DUMMY_GR")) {
					v.PlayAnimCloseDoor("G_R", 1.0f, 0);
					v.RemoveCommand("DUMMY_GR");	
				}
			}
			v.EnableCommand("VCmdParking", true);
			v.EnableCommand("MoveTo", true);
			if (v.IsSpecialLightEnabled()) v.PushActionExecuteCommand(ACTION_APPEND, "VCmdUmfeld", Caller, 0, false);
		}else{
			ScriptInterface::ShowMessageTickerTextForSinglePlayer(&v, "BHint_56");
		}		
	} 
};

//
// VCmdWarntafel (Aufklappen der Tafel am LRF)
//

object VCmdWarn : CommandScript
{
	VCmdWarn()
	{
		SetIcon("install");
		SetCursor("install");
		SetValidTargets(ACTOR_VEHICLE);
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetPriority(95);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_VEHICLE) return false;
		if (!Caller->HasCommand("ALARM_DUMMY")) return false;
		return true;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
 		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID()) return false;
		return true;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->HasCommand("KRA")) {
			Caller->EnableCommand("MoveTo", false);
			Caller->EnableCommand("VCmdWarn", false);
			Caller->EnableCommand("FahrzeugPosition", false);
			Caller->AssignCommand("KRA");		
			Caller->AssignCommand("VCmdWarnAb");
			Caller->RemoveCommand("VCmdWarn");//EDIT
			Caller->SetAnimation("KR_UP");
			Caller->PushActionWait(ACTION_APPEND, 5.f);
			Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWarn", Target, 1, false);
		} if (childID == 1) {
			char t[54]; float r[9];
			snprintf(t, 54, "Tafel_%s", Caller->GetName());
			Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			else
			{
				GameObject w = Game::CreateObject("mod:Prototypes/Objects/_VehicleParts_childs/PP_10_10_Kreuz.e4p", t);
			}
			w.SetPosition(Caller->GetPosition());
			w.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			w.UpdatePlacement();
			w.EnableSpecialLights(true);
			Caller->SetChildEnabled("KR", false);
		}
	}     
};

object VCmdWarnAb : CommandScript
{
	VCmdWarnAb()
	{
		SetIcon("deinstall");
		SetCursor("deinstall");
		SetValidTargets(ACTOR_VEHICLE);
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetPriority(95);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_VEHICLE) return false;
		if (!Caller->HasCommand("ALARM_DUMMY")) return false;
		return true;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
 		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID()) return false;
		return true;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle c(Caller); char t[54];
		if (Caller->HasCommand("KRA")) {
			Caller->EnableCommand("MoveTo", true);
			Caller->EnableCommand("VCmdWarn", true);
			Caller->EnableCommand("FahrzeugPosition", true);
			Caller->RemoveCommand("KRA");		
			Caller->RemoveCommand("VCmdWarnAb");
			Caller->AssignCommand("VCmdWarn");
			Caller->SetChildEnabled("KR", true);
			Caller->SetAnimation("KR_DOWN");	
			snprintf(t, 54, "Tafel_%s", Caller->GetName());
			GameObjectList l = Game::GetGameObjects(t);
			for(int i=0; i<l.GetNumObjects(); i++) l.GetObject(i)->PushActionDeleteOwner(ACTION_APPEND);
		}
	}     
};

//
// VCmdASF_Bestatter (Abwicklung fï¿½r ASF und Bestatter)
//

object rufe_ASF : CommandScript
{
	rufe_ASF()
	{
		SetIcon("ASF2");
		SetCursor("liftwithcrane");
		SetGroupID(CGROUP_GETEQUIPMENT);
		SetValidTargets(ACTOR_FLOOR | ACTOR_VEHICLE | ACTOR_OBJECT);
		SetPriority(-1);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (Input::LCtrlPressed() || Input::RCtrlPressed()) SetPriority(199);
		else SetPriority(-1);
		return (Input::LCtrlPressed() || Input::RCtrlPressed());//true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{

		GameObject obj(Target);
		if (obj.IsFlagSet(OF_PERSON_ENCLOSED)) return false;
		if (Target->GetType() == ACTOR_VEHICLE)
		{
			Vehicle v(Target);
			if (Game::IsWater(v.GetPosition(), false)) return false;
			if (v.GetEnergy() <= 0.1f * v.GetMaxEnergy() && !v.IsSmoking()) return true; // Fahrzeug kaputt und gelï¿½scht
			if (v.IsDestroyed()) return true; // Fahrzeug zerstï¿½rt
			if (!v.IsParking()) return false; // normales Fahrzeug, welches nicht parkt
			return true;
		} 
		else if(Target->GetType() == ACTOR_OBJECT)
		{
			GameObject g(Target);
			if (g.IsFlagSet(OF_TRANSPORTABLE)) return true;
			else return false;
		}
		else return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vector TargetPos; char asfname[255]; char asfvo[255]; char asfpath[255]; Actor fz; char speeds[10];

		if(Target->GetType() == ACTOR_VEHICLE || Target->GetType() == ACTOR_OBJECT) TargetPos = Target->GetPosition();
		else TargetPos = Game::GetCommandPos();
		
		float distu = Caller->Distance(TargetPos.x,TargetPos.y,TargetPos.z);
		bool big = false;
		if (Target->GetType() == ACTOR_OBJECT)
		{
			GameObject z(Target);
			if(z.HasCommand("FOXCMMTSTARGET"))
			{
				Mission::PlayHint("FHint_33");
				return;
			}
			
		}
		if (Target->GetType() == ACTOR_OBJECT || Target->GetType() == ACTOR_VEHICLE)
		{
			GameObject z(Target);
			big = ((z.HasCommand("FOXBIGVEHICLE")) && (z.GetUserData() != -42));
		}
		if (distu > 600.0f) 
		{
			if (!Game::IsMultiplayer()) Game::ShowHelpTextWindow("BHint_57");
			else ScriptInterface::ShowMessageTickerTextForSinglePlayer(Caller, "BHint_57");
			return; // ehemals break;
		} else
		{
			if (!Game::IsMultiplayer()) Game::ShowHelpTextWindow("BHint_58");
			else ScriptInterface::ShowMessageTickerTextForSinglePlayer(Caller, "BHint_58");
			snprintf(asfvo, 255, "ASF_%u", Math::rand()%8+1);	
			ActorList l1(asfvo);
			if(l1.GetNumActors() > 0) fz = *l1.GetActor(0);
			else System::Error("rufe_ASF: SpawnPoint nicht gefunden");
			snprintf(asfpath, 255, "mod:Prototypes/Vehicles/__ TechOrg/ASF_%i.e4p", big?5:Math::rand()%3+1);	
			snprintf(asfname, 255, "ASF%i", Caller->GetID());	
			if(!Game::IsSquadInVirtualObject(asfvo))
			{
				Vehicle v = Game::CreateVehicle(asfpath, asfname);

				Game::GetGameString("civilspeed", speeds, 10);
				v.SetSpeed(Math::atof(speeds));

				Vector fzpos = fz.GetPosition();
				Game::FindFreePosition(&v, fzpos, 1000.0f);
				v.SetMaxPassengers(2);
				v.SetPlayerMP(Caller->GetPlayerMP());
				v.SetPosition(fzpos);
				//v.AssignCommand("VCmdDebug");
				v.AssignCommand("EmptyCar");
				v.AssignCommand("DummyHasBesen");
				v.AssignCommand("FOXDMove");
				v.AssignCommand("MoveToOrient");
				v.SetChildEnabled("plane",false);
				v.PushActionExecuteCommand(ACTION_NEWLIST, "Create_Person", &v, 24, true);
				v.AssignCommand("DummyHasBesen");
				if (v.IsBlueLightEnabled()) v.EnableBlueLights(false);
				if(Target->GetType() == ACTOR_VEHICLE|| Target->GetType() == ACTOR_OBJECT)
				{
					v.PushActionExecuteCommand(ACTION_APPEND, "LoadUp", Target, 0, false);
					v.PushActionWait(ACTION_APPEND, 2.0f);
				} else
				{
					Game::FindFreePosition(&v,TargetPos);
					v.PushActionMove(ACTION_APPEND, TargetPos);
				}
			}else{
				Game::ExecuteCommand("rufe_ASF", Caller,Target);
			}			
		}
	}
};
object alarm_BSW : CommandScript
{
	alarm_BSW()
	{
		SetIcon("bestatter");
		SetCursor("bestatter");
		SetGroupID(CGROUP_GETEQUIPMENT);
	}
	bool CheckPossible(GameObject *Caller)
	{
/*
		if ((Input::LCtrlPressed() || Input::RCtrlPressed())) SetPriority(10000);
		else SetPriority(0);
*/
		return Caller->GetEquipment() == EQUIP_NONE;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		Person pat(Target);
		if(/*pat.IsDead()||*/pat.HasCommand("PERSON_TOT") || Caller->GetID() == Target->GetID()){return true;}
		else{return false;}
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vector TargetPos; char bswname[255]; char bswvo[255]; char bswpath[255]; Actor fz;  char speeds[10];

		if (Caller->GetID() == Target->GetID()) TargetPos = Caller->GetPosition();
		else TargetPos = Game::GetCommandPos();
		Person pat(Target);
		float distu = Caller->Distance(TargetPos.x,TargetPos.y,TargetPos.z);
		if (pat.HasCommand("Mord"))
		{
			Mission::PlayHint("FHint_31");
			return;
		}
		if (distu > 500.0f) 
		{
			if (!Game::IsMultiplayer()) Game::ShowHelpTextWindow("BHint_59");
			else ScriptInterface::ShowMessageTickerTextForAll("BHint_59");
			return;
		} else
		{

			if (!Game::IsMultiplayer()) Game::ShowHelpTextWindow("BHint_60");
			else ScriptInterface::ShowMessageTickerTextForAll("BHint_60");
			snprintf(bswvo, 255, "ASF_%u", Math::rand()%7+1);	
			ActorList l1(bswvo);
			if(l1.GetNumActors() > 0) fz = *l1.GetActor(0);
			else System::Error("alarm_BSW: SpawnPoint nicht gefunden");
			snprintf(bswpath, 255, "mod:Prototypes/Vehicles/__ TechOrg/Bestatter_%i.e4p", Math::rand()%2+1);	
			snprintf(bswname, 255, "BSW%i", bswindex);
			bswindex++;

			if(!Game::IsSquadInVirtualObject(bswvo))
			{
				Vehicle v = Game::CreateVehicle(bswpath, bswname);
				Vector fzpos = fz.GetPosition();
				Game::FindFreePosition(&v, fzpos);
				Game::FindFreePosition(&v, TargetPos, 800.0f);
				Game::GetGameString("civilspeed", speeds, 10);
				v.SetSpeed(Math::atof(speeds));
				
				Person p = Game::CreatePerson("mod:Prototypes/Persons/__ Bieberfelde/Bestatter.e4p", bswname);
				p.SetPlayerMP(Caller->GetPlayerMP());
				p.SetCommandable(true);
				//p.AssignCommand("GetPatient");
				v.AddPassenger(&p);
				v.AssignCommand("FOXDMove");
				
				v.SetMaxPassengers(1);
				v.SetMaxTransports(1);
				v.SetPlayerMP(Caller->GetPlayerMP());
				v.SetPosition(fzpos);
				v.AssignCommand("VCmdDebug");
				v.AssignCommand("EmptyCar");
				if (Caller->GetID() != Target->GetID())
				{
					Person pat(Target);
					pat.AssignCommand("Dummy_tot");
					v.PushActionExecuteCommand(ACTION_NEWLIST, "BSW_abtransport", &pat, 0, false);
				}
				else v.PushActionMove(ACTION_APPEND, TargetPos);
			}else{
				Game::ExecuteCommand("alarm_BSW", Caller,Target);
			}
		}
	}
};


object BSW_abtransport : CommandScript
{
	BSW_abtransport()
	{ }

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		Person pat(Target);
		if(!pat.IsValid() && childID != 2)return;
		switch(childID)
		{
			//Zum Einsatzort
			case 0 :
				Vector PatPos;
				PatPos = pat.GetPosition();
				Game::FindFreePosition(&v,PatPos,800);
				v.PushActionMove(ACTION_APPEND, PatPos, true);
				v.PushActionExecuteCommand(ACTION_APPEND, "BSW_abtransport", &pat, 1, false);
				break;
			//Verstorbenen aufladen
			case 1 :
				PersonList pl = v.GetPassengers();
				Person p = *pl.GetPerson(0);

				p.PushActionLeaveCar(ACTION_NEWLIST, &v);
				p.PushActionMove(ACTION_APPEND, Target, TARGET_TOUCHPERSON);
				p.PushActionTurnTo(ACTION_APPEND, Target);
				p.PushActionLift(ACTION_APPEND, Target);  
				p.PushActionExecuteCommand(ACTION_APPEND, "EnterCar", Caller, 0, false);
				p.PushActionExecuteCommand(ACTION_APPEND, "BSW_abtransport", &v, 2, false);
				break;
			//Zur Basis
			case 2 :
				//System::Log("test - BSW");
				Vehicle v(Target);
				v.PushActionExecuteCommand(ACTION_APPEND,"await_bording_personal",&v,1,false);
				//v.PushActionExecuteCommand(ACTION_APPEND, "BSW_abtransport", &v, 3, false);
				v.PushActionExecuteCommand(ACTION_APPEND, "GoHome", &v, 0, false);
				break;
			case 3 :
			/*
				PersonList pl=v.GetTransports();
				for(int i=0;i<pl.GetNumPersons();i++){
					if(pl.GetPerson(i)->HasName("Leiche")){
						Person(&Game::GetActor(pl.GetPerson(i)->GetUserData())).PushActionDeleteOwner(ACTION_NEWLIST);
					}
				}*/
				break;
		}
	}
};

//
//	VCmdWechsellader
//

object VCmdWLFUnload : CommandScript
{
	VCmdWLFUnload() // absatteln
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetIcon("WLF_AB");
		SetCursor("drop");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	bool CheckPossible(GameObject *Caller)
	{
		Vehicle v(Caller);
		if (v.GetNumPassengers() == 0) return false;
		if (Caller->GetType() != ACTOR_VEHICLE || !Caller->HasCommand("ALARM_DUMMY")) return false;
		if(v.IsChildEnabled("ABMANV")||v.IsChildEnabled("ABAS")||v.IsChildEnabled("ABDEKON")||v.IsChildEnabled("ABMULDE")||v.IsChildEnabled("ABR")||v.IsChildEnabled("ABW"))
			return true;
		return false;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{ return true; }
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		switch(childID)
		{
			case 0:
			case 10:
				//if (childID == 0 && Caller->IsMoving()) Caller->ClearActions();
				if (!Caller->IsSpecialLightEnabled()) Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWarning", Caller, 0, false);
				if (Caller->HasCommand("DummyHasSiren")) Caller->PushActionExecuteCommand(ACTION_APPEND, "VcmdSiren", Caller, 0, false);
				Caller->SetCommandable(false);
				System::Log(" ~~ WLFUNLOAD0 ~~ ");
				Caller->PushActionExecuteCommand(ACTION_INSERT, "VCmdWLFUnload", Target, 1, false);
				Caller->PushActionWait(ACTION_INSERT, wlfFac * 20.f);
				Caller->PushActionSwitchAnim(ACTION_INSERT, "wlf_ab");
				break;
			case 1:
				float r[9]; float y[9]; Vehicle c;
				Vector a = Caller->GetPosition();
				Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
				if (Game::FindFreePosition(Caller, a)) 
				{
					if (Caller->IsChildEnabled("ABMULDE")) c = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/AB_MU_01.e4p", "AB_MULDE");	
					if (Caller->IsChildEnabled("ABAS")) c = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/AB_AS_01.e4p", "AB_AS");			
					if (Caller->IsChildEnabled("ABDEKON")) c = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/AB_DE_01.e4p", "AB_DEKON");
					if (Caller->IsChildEnabled("ABW")) c = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/AB_W_01.e4p", "AB_WASSER");
					if (Caller->IsChildEnabled("ABMANV")) c = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/AB_MN_01.e4p", "AB_MANV"); 
					if (Caller->IsChildEnabled("ABR")) c = Game::CreateVehicle("mod:Prototypes/Vehicles/__ Feuerwehr/AB_R_01.e4p", "AB_RUEST"); 
					if (Caller->IsChildEnabled("ABMANV")) c.AssignCommand("VcmdInstallTent");
					float fx = -415.f * wlfDFac, fy = 0.f, fz = 0.f;
					Math::RotateVector(fx, fy, fz, r);
					Math::EulerToMatrix(0.f, 0.f, 0.f, y);
					Math::MultiplyMatrices(y, r);
					a = a + Vector(fx, fy, fz);
					c.AssignCommand("ALARM_DUMMY");
					if (c.HasName("AB_RUEST")) c.AssignCommand("VCmdLiMa");
					c.SetRotation(y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8]);
					c.SetPosition(a);
					c.UpdatePlacement();

					if (Game::IsMultiplayer()) c.SetPlayerMP(Caller->GetPlayerMP());
				}
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_MN_01.e4p") == 0) Caller->SetChildEnabled("ABMANV", false);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_W_01.e4p") == 0) Caller->SetChildEnabled("ABW", false);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_R_01.e4p") == 0) Caller->SetChildEnabled("ABR", false);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_AS_01.e4p") == 0) Caller->SetChildEnabled("ABAS", false);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_MU_01.e4p") == 0) Caller->SetChildEnabled("ABMULDE", false);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_DE_01.e4p") == 0) Caller->SetChildEnabled("ABDEKON", false);
				// ID 4
				c.SetChildEnabled("wasser", Caller->IsChildEnabled("ABID"));
				c.SetChildEnabled("fzg", Caller->IsChildEnabled("ABID"));
				c.SetChildEnabled("stream", false);
				if (Caller->IsChildEnabled("ABID")) Caller->SetChildEnabled("ABID", false);
				//
				c.SetCommandable(true);
				if (Caller->IsBlueLightEnabled()) c.PushActionExecuteCommand(ACTION_INSERT, "VCmdBlue", &c, 0, false);
				if (!c.IsSpecialLightEnabled()) c.EnableSpecialLights(true);
				c.RemoveCommand("VCmdInit");
				if(Caller->HasChild("LM")) c.AssignCommand("VCmdLiMa");
				if(Caller->HasChild("KR")) c.AssignCommand("VCmdWarn");		
				c.RemoveCommand("GoHome");		
				c.AssignCommand("DUMMY_INIT");
				c.AssignCommand("VCmdDebug");
				if (c.HasName("AB_WASSER") || c.HasName("AB_MULDE"))c.PushActionExecuteCommand(ACTION_APPEND,"ZZ_Schnitt",&c,c.HasName("AB_MULDE")?20:2,false);
				Caller->PushActionExecuteCommand(ACTION_INSERT, "VCmdWLFUnload", Target, 2, false);
				Caller->PushActionWait(ACTION_INSERT, 1.5f);
				if ( c.IsCollidingWithVirtualObject(c.GetName()))
				{
					if (c.HasName("AB_MULDE") && c.IsChildEnabled("fzg"))
					{
						System::Log(" ~~ remove Triggered Electric vehicle ~~ ");
						c.PushActionWait(ACTION_APPEND, 180.f); // 180.0f
						c.PushActionExecuteCommand(ACTION_APPEND, "FoxGenUtils", &c, 17);
					}
					else if (c.HasName("AB_WASSER"))
					{
						c.PushActionExecuteCommand(ACTION_APPEND, "ZZ_Schnitt", &c, 202, false);
					}
					Game::ExecuteCommand("RESETAGT", &c, &c);
				}
				break;
			case 2:
				Caller->PushActionExecuteCommand(ACTION_INSERT, "VCmdWLFUnload", Target, 3, false);
				Caller->PushActionWait(ACTION_INSERT, wlfFac * 18.f);
				Caller->PushActionSwitchAnim(ACTION_INSERT, "wlf_auf");
				break;
			case 3:
				Caller->SetCommandable(true);
				Caller->AssignCommand("VCmdWLFLoadup");
				Caller->RemoveCommand("VCmdWLFUnload");
				if (Caller->HasCommand("FOXInstallAB")) Caller->RemoveCommand("FOXInstallAB");
				Caller->PushActionExecuteCommand(ACTION_INSERT, "VCmdWarning", Caller, 0, false);
				break;
		}
	}
};

object VCmdWLFLoadup : CommandScript
{
	VCmdWLFLoadup() // aufsatteln
	{
		SetValidTargets(ACTOR_VEHICLE|ACTOR_OBJECT);
		SetIcon("WLF_AUF");
		SetCursor("liftwithcrane");
	}
	bool CheckPossible(GameObject *Caller)
	{
		Vehicle v(Caller);
		if (v.GetNumPassengers() == 0) return false;
		if (Caller->GetType() != ACTOR_VEHICLE || !Caller->HasCommand("ALARM_DUMMY")) return false;
		/*
		if(v.IsChildEnabled("ABMANV")||v.IsChildEnabled("ABAS")||v.IsChildEnabled("ABDEKON")||v.IsChildEnabled("ABMULDE")||v.IsChildEnabled("ABR")||v.IsChildEnabled("ABW"))
			return false;
		*/
		return true;
	}
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{	
		if(Target->GetType()==ACTOR_OBJECT&&(Target->HasNamePrefix("AB_")||Game::IsMultiplayer()))return true;
		Vehicle container(Target);
		if (StrCompare(container.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_MN_01.e4p")
			&&StrCompare(container.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_AS_01.e4p")
			&&StrCompare(container.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_MU_01.e4p")
			&&StrCompare(container.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_DE_01.e4p")
			&&StrCompare(container.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_R_01.e4p")
			&&StrCompare(container.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_W_01.e4p"))
			return false;
		if (container.HasCommand("DummyTentInstalled") || container.GetNumPassengers() > 0) return false;
		return true;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		System::Log(" ~~ LoadUp AB");
		if (Target->GetType() == ACTOR_VEHICLE)
		{
			Vehicle vTar(Target);
			if (vTar.HasCommand("TLF_Cool")) return;
			if (vTar.GetNumUsedConnectors() > 0 || vTar.HasCommand("has_wv")) return;
		}
		bool toor=false;
		if(Target->GetType()==ACTOR_OBJECT){
			if(!Target->HasNamePrefix("AB_"))return;
			GameObject obj(Target);
			VehicleList vl(obj.GetName());
			if(vl.GetNumVehicles()!=0){
				Vehicle c(vl.GetVehicle(0));
			}else
				Vehicle c=Vehicle();
			toor=true;
		}else{
			Vehicle c(Target);
			if(childID==0&&c.IsCollidingWithVirtualObject(c.GetName())){
				System::Log(" ~~ searching AB");
				GameObjectList objs=Game::GetGameObjects(c.GetName());
				for(int i=0;i<objs.GetNumObjects();i++){
					if(objs.GetObject(i)->IsValid()&&objs.GetObject(i)->GetType()==ACTOR_OBJECT){
						System::Log(" ~~ found AB Gate");
						Target=objs.GetObject(i);
						toor=true;
					}
				}
			}
		}
		// Lift down current AB if neccesary
		if(childID == 0 && (Caller->IsChildEnabled("ABMANV")||Caller->IsChildEnabled("ABAS")||Caller->IsChildEnabled("ABDEKON")||Caller->IsChildEnabled("ABMULDE")||Caller->IsChildEnabled("ABR")||Caller->IsChildEnabled("ABW")))
		{
			Caller->PushActionExecuteCommand(ACTION_NEWLIST, "ab_parken", Caller, 10);
			Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWLFLoadup", Target, childID);
			return;
		}
		//
		float r[9]; float rot[9];
		Vector a = c.GetPosition();
		c.SetSelectable(false);
		c.SetCommandable(false);
		c.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
		// GerÃ¤terÃ¤ume schlieÃen
		
		float fx = 415.f*wlfDFac, fy = 0.f, fz = 0.f;
		Math::RotateVector(fx, fy, fz, r);
		Math::EulerToMatrix(0.f, 0.f, 0.f, rot);
		Math::MultiplyMatrices(rot, r);
		a = a + Vector(fx, fy, 0);
		switch(childID)
		{
			case -1:
				if (c.IsChildEnabled("fzg") && !c.IsChildEnabled("wasser"))
				{
					Mission::PlayHint("FHint_75");					
					return;
					// remove // for realisationF
				}
				else if(c.IsChildEnabled("wasser") && !c.IsChildEnabled("fzg")) c.SetChildEnabled("wasser", false);
				if(toor)GameObject(Target).SetAnimation("open");
				Caller->SetCommandable(false);
				Caller->SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
				Caller->SetPosition(a);
				Caller->UpdatePlacement();
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWLFLoadup", Target, -2, false);
				break;
			case -2:
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWarning", Caller, 0, false);
				if (Caller->HasCommand("DummyHasSiren")) Caller->PushActionExecuteCommand(ACTION_APPEND, "VcmdSiren", Caller, 0, false);
				Caller->PushActionWait(ACTION_APPEND, 0.5f);
				Caller->PushActionSwitchAnim(ACTION_APPEND, "wlf_ab");
				Caller->PushActionWait(ACTION_APPEND, wlfFac * 20.f);
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWLFLoadup", Target, -3, false);

				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_W_01.e4p") == 0 || c.HasName("AB_MULDE"))
				{
					c.PushActionWait(ACTION_APPEND, wlfFac * 19.f);
					c.PushActionExecuteCommand(ACTION_APPEND,"ZZ_Schnitt",&c,100,false);
				}
				break;
			case -3:
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_MN_01.e4p") == 0) Caller->SetChildEnabled("ABMANV", true);	
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_W_01.e4p") == 0) Caller->SetChildEnabled("ABW", true);	
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_R_01.e4p") == 0) Caller->SetChildEnabled("ABR", true);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_AS_01.e4p") == 0) Caller->SetChildEnabled("ABAS", true);	
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_MU_01.e4p") == 0) Caller->SetChildEnabled("ABMULDE", true);
				if (StrCompare(c.GetPrototypeFileName(), "mod:Prototypes/Vehicles/__ Feuerwehr/AB_DE_01.e4p") == 0) Caller->SetChildEnabled("ABDEKON", true);				
				Caller->SetChildEnabled("ABID", c.IsChildEnabled("fzg"));
				Caller->SetAnimation("wlf_abgesattelt");
				Caller->PushActionWait(ACTION_APPEND, 0.5f);
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWLFLoadup", Target, -4, false);
				c.PushActionDeleteOwner(ACTION_NEWLIST);
				break;
			case -4:
				Caller->SetAnimation("wlf_auf");
				Caller->PushActionSwitchAnim(ACTION_APPEND, "wlf_auf");
				Caller->PushActionWait(ACTION_APPEND, wlfFac * 18.f);
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWLFLoadup", Target, -5, false);
				break;
			case -5:
				if(toor)GameObject(Target).SetAnimation("close");
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWarning", Caller, 0, false);
				Caller->SetCommandable(true);
				//if (Caller->HasCommand("VCmdWLFLoadup")) Caller->RemoveCommand("VCmdWLFLoadup");
				if (!Caller->HasCommand("VCmdWLFUnload")) Caller->AssignCommand("VCmdWLFUnload");
				if (Caller->IsChildEnabled("ABW")) Caller->AssignCommand("FOXInstallAB");
				break;
			default:
				Caller->PushActionMove(ACTION_NEWLIST, a);
				Caller->PushActionWait(ACTION_APPEND, 0.5f);
				Caller->PushActionExecuteCommand(ACTION_APPEND, "VCmdWLFLoadup", Target, -1, false);
				// Lichtmast einfahren und einpacken.
				if (c.HasCommand("TurnLM")) c.PushActionExecuteCommand(ACTION_APPEND, "TurnLM", &c);
				c.PushActionExecuteCommand(ACTION_APPEND, "VCmdEinsteigen", &c, 42);
				break;
		}
	}
};


//
// VCmdABParken
//

object ab_parken : CommandScript
{
	ab_parken()
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetIcon("WLFp");
		SetCursor("WLFp");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID()) return false;
		else return true;			
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid())
			return false;
		Vehicle v(Caller);
		if (v.GetNumPassengers() == 0) return false;
		if(v.IsChildEnabled("ABMANV")||v.IsChildEnabled("ABAS")||v.IsChildEnabled("ABDEKON")||v.IsChildEnabled("ABMULDE")||v.IsChildEnabled("ABR")||v.IsChildEnabled("ABW"))
			return true;
		return false;
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		Vector anfahrpos;
		const char *pname;

		switch(childID)
		{
			case 0:
			case 10:
			{
				if(v.IsChildEnabled("ABMANV"))
				{
					pname = "P_ABMANV";
				}else if(v.IsChildEnabled("ABAS")){
					pname = "P_ABAS";
				}else if(v.IsChildEnabled("ABDEKON")){
					pname = "P_ABDEKON";
				}else if(v.IsChildEnabled("ABMULDE")){
					pname = "P_ABMULDE";
				}
				else if(v.IsChildEnabled("ABR")){
					pname = "P_ABR";
				}
				else if(v.IsChildEnabled("ABW")){
					pname = "P_ABWASSER";
				}
				GameObjectList gol = Game::GetGameObjects(pname);
				if (gol.GetNumObjects() > 0)
				{
					GameObject pos(gol.GetObject(0));
					if (childID == 0) v.ClearActions();
					v.PushActionExecuteCommand(ACTION_INSERT, "ab_parken", &pos, 1+childID, false);	
					v.PushActionMove(ACTION_INSERT, pos.GetPosition(), false);
					v.PushActionWait(ACTION_INSERT, 1.f);
				}
			}
			break;

			case 1:
			case 11:
			{
				if(v.IsChildEnabled("ABMANV"))
				{
					pname = "AB_MANV";
				}else if(v.IsChildEnabled("ABAS")){
					pname = "AB_AS";
				}else if(v.IsChildEnabled("ABDEKON")){
					pname = "AB_DEKON";
				}else if(v.IsChildEnabled("ABMULDE")){
					pname = "AB_MULDE";
				}else if(v.IsChildEnabled("ABR")){
					pname = "AB_R";
				}else if(v.IsChildEnabled("ABW")){
					pname = "AB_WASSER";
				}
				GameObject pos(Target);
				v.SetRotation(&pos);
				v.SetPosition(pos.GetPosition());
				v.PushActionExecuteCommand(ACTION_INSERT, "VCmdWLFUnload", &v, childID-1, false);
				GameObjectList objs=Game::GetGameObjects(pname);
				for(int i=0;i<objs.GetNumObjects();i++){
					if(objs.GetObject(i)->GetType()==ACTOR_OBJECT){
						objs.GetObject(i)->SetAnimation("open");
						objs.GetObject(i)->PushActionWait(ACTION_NEWLIST,35);
						objs.GetObject(i)->PushActionExecuteCommand(ACTION_APPEND, "ab_parken", objs.GetObject(i), 2, false);
					}
				}
			}
			break;
			case 2:
			{
				GameObject(Target).SetAnimation("close");
			}
			break;
		}

		
	}
};